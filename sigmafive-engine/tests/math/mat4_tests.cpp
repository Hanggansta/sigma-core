#include <gtest/gtest.h>
#include <gmock/gmock.h>
#include <sigmafive/math/mat4.hpp>

TEST(mat4_tests,default_constructor) {
	int4x4 a;

	EXPECT_EQ(int4x4({1,0,0,0},
					{0,1,0,0},
					{0,0,1,0},
					{0,0,0,1}),a);
}

TEST(mat4_tests,constructor_four_vec4s) {
	int4x4 a({1,2,3,4},
	{1,3,3,9},
	{3,2,1,4},
	{1,4,3,8});
	EXPECT_EQ(int4x4({1,2,3,4},
	{1,3,3,9},
	{3,2,1,4},
	{1,4,3,8}),a);
}

TEST(mat4_tests,equal_true) {
	int4x4 a({1,2,3,4},
	{1,3,3,9},
	{3,2,1,4},
	{1,4,3,8});
	int4x4 b({1,2,3,4},
	{1,3,3,9},
	{3,2,1,4},
	{1,4,3,8});
	EXPECT_TRUE(a==b);
}

TEST(mat4_tests,equal_false) {
	int4x4 a({1,2,3,4},
	{1,3,3,9},
	{3,2,1,4},
	{1,4,3,8});
	int4x4 b({1,2,3,4},
	{1,3,3,9},
	{3,2,1,15},
	{1,4,3,8});
	EXPECT_FALSE(a==b);
}

TEST(mat4_tests,not_equal_false) {
	int4x4 a({1,2,3,4},
	{1,3,3,9},
	{3,2,1,4},
	{1,4,3,8});
	int4x4 b({1,2,3,4},
	{1,3,3,9},
	{3,2,1,4},
	{1,4,3,8});
	EXPECT_FALSE(a!=b);
}

TEST(mat4_tests,not_equal_true) {
	int4x4 a({1,2,3,4},
	{1,3,3,9},
	{3,2,1,4},
	{1,4,3,8});
	int4x4 b({1,2,3,4},
	{1,3,3,9},
	{16,2,1,4},
	{1,4,3,8});
	EXPECT_TRUE(a!=b);
}

TEST(mat4_tests,less_than_true) {
	int4x4 a({0,0,0,0},
	{0,0,0,0},
	{0,0,0,0},
	{0,0,0,0});
	int4x4 b({1,2,3,4},
	{1,3,3,9},
	{3,2,1,4},
	{1,4,3,8});
	EXPECT_TRUE(a<b);
}

TEST(mat4_tests,less_than_false) {
	int4x4 a({1,2,3,4},
	{1,3,3,9},
	{3,2,1,4},
	{1,4,3,8});
	int4x4 b({0,0,0,0},
	{0,0,0,0},
	{0,0,0,0},
	{0,0,0,0});
	EXPECT_FALSE(a<b);
}

TEST(mat4_tests,less_than_equal_true) {
	int4x4 a({0,0,0,0},
	{0,0,0,0},
	{0,0,0,0},
	{0,0,0,0});
	int4x4 b({1,2,3,4},
	{1,3,3,9},
	{3,2,1,4},
	{1,4,3,8});
	EXPECT_TRUE(a<=b);
}

TEST(mat4_tests,less_than_equal_false) {
	int4x4 a({1,2,3,4},
	{1,3,3,9},
	{3,2,1,4},
	{1,4,3,8});
	int4x4 b({0,0,0,0},
	{0,0,0,0},
	{0,0,0,0},
	{0,0,0,0});
	EXPECT_FALSE(a<=b);
}

TEST(mat4_tests,greater_than_true) {
	int4x4 a({1,2,3,4},
	{1,3,3,9},
	{3,2,1,4},
	{1,4,3,8});
	int4x4 b({0,0,0,0},
	{0,0,0,0},
	{0,0,0,0},
	{0,0,0,0});
	EXPECT_TRUE(a>b);
}

TEST(mat4_tests,greater_than_false) {
	int4x4 a({0,0,0,0},
	{0,0,0,0},
	{0,0,0,0},
	{0,0,0,0});
	int4x4 b({1,2,3,4},
	{1,3,3,9},
	{3,2,1,4},
	{1,4,3,8});
	EXPECT_FALSE(a>b);
}

TEST(mat4_tests,greater_than_equal_true) {
	int4x4 a({1,2,3,4},
	{1,3,3,9},
	{3,2,1,4},
	{1,4,3,8});
	int4x4 b({0,0,0,0},
	{0,0,0,0},
	{0,0,0,0},
	{0,0,0,0});
	EXPECT_TRUE(a>=b);
}

TEST(mat4_tests,greater_than_equal_false) {
	int4x4 a({0,0,0,0},
	{0,0,0,0},
	{0,0,0,0},
	{0,0,0,0});
	int4x4 b({1,2,3,4},
	{1,3,3,9},
	{3,2,1,4},
	{1,4,3,8});
	EXPECT_FALSE(a>=b);
}

TEST(mat4_tests,add) {
	int4x4 a({1,2,3,4},
	{1,3,3,9},
	{3,2,1,4},
	{1,4,3,8});
	int4x4 b({1,2,5,7},
	{1,3,3,9},
	{6,12,6,6},
	{1,4,1,4});
	EXPECT_EQ(int4x4({2,4,8,11},
	{2,6,6,18},
	{9,14,7,10},
	{2,8,4,12}),a+b);
}

TEST(mat4_tests,sub) {
	int4x4 a({2,4,8,11},
	{2,6,6,18},
	{9,14,7,10},
	{2,8,4,12});
	int4x4 b({1,2,5,7},
	{1,3,3,9},
	{6,12,6,6},
	{1,4,1,4});
	EXPECT_EQ(int4x4({1,2,3,4},
	{1,3,3,9},
	{3,2,1,4},
	{1,4,3,8}),a-b);
}

TEST(mat4_tests,neg) {
	int4x4 a({1,2,3,4},
	{1,3,3,9},
	{3,2,1,4},
	{1,4,3,8});
	EXPECT_EQ(int4x4({-1,-2,-3,-4},
	{-1,-3,-3,-9},
	{-3,-2,-1,-4},
	{-1,-4,-3,-8}),-a);
}

TEST(mat4_tests,mult_mat4) {
	int4x4 a({2,4,8,11},
	{2,6,6,18},
	{9,14,7,10},
	{2,8,4,12});
	int4x4 b({1,2,5,7},
	{1,3,3,9},
	{6,12,6,6},
	{1,4,1,4});
	EXPECT_EQ(int4x4({65,156,81,142},
	{62,166,82,176},
	{75,184,139,271},
	{46,124,70,158}),a*b);
}

TEST(mat4_tests,mult_vec4) {
	int4x4 a({2,4,8,11},
	{2,6,6,18},
	{9,14,7,10},
	{2,8,4,12});
	int4 v(1,2,3,4);
	EXPECT_EQ(int4(78,104,98,78),a*v);
}

TEST(mat4_tests,mult_scaler) {
	int4x4 a({2,4,8,11},
	{2,6,6,18},
	{9,14,7,10},
	{2,8,4,12});
	int s = 2;
	EXPECT_EQ(int4x4({4, 8, 16, 22},
	{4, 12, 12, 36},
	{18, 28, 14, 20},
	{4, 16, 8, 24}),a*s);
}

TEST(mat4_tests,div_scaler) {
	int4x4 a({4, 8, 16, 22},
	{4, 12, 12, 36},
	{18, 28, 14, 20},
	{4, 16, 8, 24});
	int s = 2;
	EXPECT_EQ(int4x4({2,4,8,11},
	{2,6,6,18},
	{9,14,7,10},
	{2,8,4,12}),a/s);
}

TEST(mat4_tests,add_assign) {
	int4x4 a({1,2,3,4},
	{1,3,3,9},
	{3,2,1,4},
	{1,4,3,8});
	a += int4x4({1,2,5,7},
	{1,3,3,9},
	{6,12,6,6},
	{1,4,1,4});
	EXPECT_EQ(int4x4({2,4,8,11},
	{2,6,6,18},
	{9,14,7,10},
	{2,8,4,12}),a);
}

TEST(mat4_tests,sub_assign) {
	int4x4 a({2,4,8,11},
	{2,6,6,18},
	{9,14,7,10},
	{2,8,4,12});
	a -= int4x4({1,2,5,7},
	{1,3,3,9},
	{6,12,6,6},
	{1,4,1,4});
	EXPECT_EQ(int4x4({1,2,3,4},
	{1,3,3,9},
	{3,2,1,4},
	{1,4,3,8}),a);
}

TEST(mat4_tests,mult_assign_mat4) {
	int4x4 a({2,4,8,11},
	{2,6,6,18},
	{9,14,7,10},
	{2,8,4,12});
	a *= int4x4({1,2,5,7},
	{1,3,3,9},
	{6,12,6,6},
	{1,4,1,4});
	EXPECT_EQ(int4x4({65,156,81,142},
	{62,166,82,176},
	{75,184,139,271},
	{46,124,70,158}),a);
}

TEST(mat4_tests,mult_assign_scaler) {
	int4x4 a({2,4,8,11},
	{2,6,6,18},
	{9,14,7,10},
	{2,8,4,12});
	a *= 2;
	EXPECT_EQ(int4x4({4, 8, 16, 22},
	{4, 12, 12, 36},
	{18, 28, 14, 20},
	{4, 16, 8, 24}),a);
}

TEST(mat4_tests,div_assign_scaler) {
	int4x4 a({4, 8, 16, 22},
	{4, 12, 12, 36},
	{18, 28, 14, 20},
	{4, 16, 8, 24});
	a /= 2;
	EXPECT_EQ(int4x4({2,4,8,11},
	{2,6,6,18},
	{9,14,7,10},
	{2,8,4,12}),a);
}

TEST(mat4_tests,det) {
	int4x4 a({2,4,8,11},
	{2,6,6,18},
	{9,14,7,10},
	{2,8,4,12});

	EXPECT_EQ(1716,a.det());
}

TEST(mat4_tests,get_transpose) {
	int4x4 a({2,4,8,11},
	{2,6,6,18},
	{9,14,7,10},
	{2,8,4,12});

	EXPECT_EQ(int4x4({2,2,9,2},
	{4,6,14,8},
	{8,6,7,4},
	{11,18,10,12}), a.get_transpose());
}

TEST(mat4_tests,get_inverse) {
	int4x4 a({1,4,8,11},
	{0,1,6,18},
	{0,0,1,10},
	{0,0,0,1});

	EXPECT_EQ(int4x4({1,-4,16,-99},
	{0,1,-6,42},
	{0,0,1,-10},
	{0,0,0,1}), a.get_inverse());
}

TEST(mat4_tests,transpose) {
	int4x4 a({2,4,8,11},
	{2,6,6,18},
	{9,14,7,10},
	{2,8,4,12});

	a = a.transpose();

	EXPECT_EQ(int4x4({2,2,9,2},
	{4,6,14,8},
	{8,6,7,4},
	{11,18,10,12}),a);
}

TEST(mat4_tests,inverse) {
	int4x4 a({1,4,8,11},
	{0,1,6,18},
	{0,0,1,10},
	{0,0,0,1});

	a.inverse();

	EXPECT_EQ(int4x4({1,-4,16,-99},
	{0,1,-6,42},
	{0,0,1,-10},
	{0,0,0,1}),a);
}
