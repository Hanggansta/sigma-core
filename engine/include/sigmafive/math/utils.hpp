#ifndef UTILS_HPP
#define UTILS_HPP

#include <cmath>
#include <limits>
#include <algorithm>
#include <type_traits>

template<class T>
constexpr T pi()  {
    return T(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495);
}

template<class T>
constexpr T e()  {
    return T(2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447614606680822648001684774118537423454424371075390777449920695517027618386062613313845830007520449338265602976067371132007093287091274437470472306969772093101416928368190255151086574637721112523897844250569536967707854499699679468644549059879316368892300987931277361782154249992295763514822082698951936680331825288693984964651058209392398294887933203625094431173012381970684161403970198376793206832823764648042953118023287825098194558153);
}

template<class T>
constexpr T deg_to_rad(T deg)  {
    return (deg*pi<T>())/T(180);
}

template<class T>
constexpr T rad_to_deg(T rad)  {
    return (rad*T(180))/pi<T>();
}

template<class T>
typename std::enable_if<!std::numeric_limits<T>::is_integer, bool>::type almost_equal(T x, T y,unsigned int ulp = 2) {
    return std::abs(x-y) < std::numeric_limits<T>::epsilon() * std::abs(x+y) * ulp || std::abs(x-y) < std::numeric_limits<T>::min();
}

template<class T>
typename std::enable_if<std::numeric_limits<T>::is_integer, bool>::type almost_equal(T a, T b) {
	return a==b;
}

template<class T>
T clamp(T inValue,T min,T max) {
    return std::min(std::max(inValue,min),max);
}

template<class T>
T remap(T inValue,T inLow,T inHi,T outLow,T outHi) {
    return (((inValue - inLow) * (outHi - outLow)) / (inHi - inLow)) + outLow;
}

static long long nCr(int n, int r) {
    if(r > n / 2)
        r = n - r; // because C(n, r) == C(n, n - r)
    long long p = 1;
    for(int i = 1; i <= r; i++) {
        p *= n - r + i;
        p /= i;
    }
    return p;
}

#endif //UTILS_HPP
