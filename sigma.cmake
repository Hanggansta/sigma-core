function(target_package_resources RESOURCE_TARGET RESOURCE_PACKAGE_DIRECTORY)
    find_program(GLSLC_COMMAND glslc REQUIRED)

    if(NOT EXISTS "${RESOURCE_PACKAGE_DIRECTORY}")
        set(RESOURCE_PACKAGE_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/${RESOURCE_PACKAGE_DIRECTORY}")
    endif()

    target_include_directories(${RESOURCE_TARGET} PUBLIC "${RESOURCE_PACKAGE_DIRECTORY}")

    get_target_property(RESOURCE_INCLUDE_DIRECTORIES1 ${RESOURCE_TARGET} INCLUDE_DIRECTORIES)
    get_target_property(RESOURCE_INCLUDE_DIRECTORIES2 ${RESOURCE_TARGET} INTERFACE_INCLUDE_DIRECTORIES)
    set(RESOURCE_INCLUDE_DIRECTORIES ${RESOURCE_INCLUDE_DIRECTORIES1} ${RESOURCE_INCLUDE_DIRECTORIES2})
    list(REMOVE_DUPLICATES RESOURCE_INCLUDE_DIRECTORIES)
    set(RESOURCE_INCLUDE_ARGUMENTS "-I\"${RESOURCE_PACKAGE_DIRECTORY}\"")
    foreach(INCLUDE_DIRECTORY ${RESOURCE_INCLUDE_DIRECTORIES})
        list(APPEND RESOURCE_INCLUDE_ARGUMENTS "-I\"${INCLUDE_DIRECTORY}\"")
    endforeach()

    file(GLOB_RECURSE GLSL_SOURCE_FILES RELATIVE "${RESOURCE_PACKAGE_DIRECTORY}" 
        "${RESOURCE_PACKAGE_DIRECTORY}/*.vert"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.tesc"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.tese"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.geom"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.frag"
    )
    list(REMOVE_DUPLICATES GLSL_SOURCE_FILES)


    foreach(GLSL ${GLSL_SOURCE_FILES})
        get_filename_component(FILE_EXT ${GLSL} EXT)
        if(${FILE_EXT} STREQUAL ".vert")
            set(SHADER_STAGE "SIGMA_ENGINE_VERTEX_SHADER")
        elseif(${FILE_EXT} STREQUAL ".frag")
            set(SHADER_STAGE "SIGMA_ENGINE_FRAGMENT_SHADER")
        elseif(${FILE_EXT} STREQUAL ".geom")
            set(SHADER_STAGE "SIGMA_ENGINE_GEOMETRY_SHADER")
        endif()

        set(SPIRV "${CMAKE_BINARY_DIR}/shaders/${GLSL}.spv")
        set(GLSL "${RESOURCE_PACKAGE_DIRECTORY}/${GLSL}")

        get_filename_component(SPIRV_PATH ${SPIRV} DIRECTORY)
        
        add_custom_command(
            OUTPUT ${SPIRV}
            COMMAND ${CMAKE_COMMAND} -E make_directory ${SPIRV_PATH}
            COMMAND ${GLSLC_COMMAND} --target-env=opengl -D${SHADER_STAGE} ${RESOURCE_INCLUDE_ARGUMENTS} ${GLSL} -o ${SPIRV}
            DEPENDS ${GLSL}
        )

        list(APPEND SPIRV_BINARY_FILES ${SPIRV})
    endforeach()
    add_custom_target(${RESOURCE_TARGET}-shaders DEPENDS ${SPIRV_BINARY_FILES})
    add_dependencies(${RESOURCE_TARGET} ${RESOURCE_TARGET}-shaders)
endfunction()



