function(target_package_resources RESOURCE_TARGET RESOURCE_PACKAGE_DIRECTORY)
    find_program(GLSLC_COMMAND glslc REQUIRED)
	find_program(SPIRV_CROSS_COMMAND spirv-cross REQUIRED)

    if(NOT EXISTS "${RESOURCE_PACKAGE_DIRECTORY}")
        set(RESOURCE_PACKAGE_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/${RESOURCE_PACKAGE_DIRECTORY}")
    endif()

    target_include_directories(${RESOURCE_TARGET} PUBLIC "${RESOURCE_PACKAGE_DIRECTORY}")

    get_target_property(RESOURCE_INCLUDE_DIRECTORIES1 ${RESOURCE_TARGET} INCLUDE_DIRECTORIES)
    get_target_property(RESOURCE_INCLUDE_DIRECTORIES2 ${RESOURCE_TARGET} INTERFACE_INCLUDE_DIRECTORIES)
    set(RESOURCE_INCLUDE_DIRECTORIES ${RESOURCE_INCLUDE_DIRECTORIES1} ${RESOURCE_INCLUDE_DIRECTORIES2})
    list(REMOVE_DUPLICATES RESOURCE_INCLUDE_DIRECTORIES)
    set(RESOURCE_INCLUDE_ARGUMENTS "-I" "${RESOURCE_PACKAGE_DIRECTORY}")
    foreach(INCLUDE_DIRECTORY ${RESOURCE_INCLUDE_DIRECTORIES})
        list(APPEND RESOURCE_INCLUDE_ARGUMENTS "-I" "${INCLUDE_DIRECTORY}")
    endforeach()

	# Bake shaders
	file(GLOB_RECURSE SHADER_SOURCE_FILES RELATIVE "${RESOURCE_PACKAGE_DIRECTORY}"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.vert"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.tesc"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.tese"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.geom"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.frag"
    )

	foreach(SHADER ${SHADER_SOURCE_FILES})
		get_filename_component(SHADER_NAME "${SHADER}" NAME_WE)
		get_filename_component(SHADER_DIRECTORY "${SHADER}" DIRECTORY)
		get_filename_component(SHADER_EXT "${SHADER}" EXT)

		if (NOT SHADER_DIRECTORY STREQUAL "")
			set(SHADER_DIRECTORY "${SHADER_DIRECTORY}/")
		endif()

		if(${SHADER_EXT} STREQUAL ".vert")
            set(SHADER_STAGE "SIGMA_ENGINE_VERTEX_SHADER")
			set(SHADER_TYPE "vertex")
		elseif(${SHADER_EXT} STREQUAL ".tesc")
			set(SHADER_STAGE "SIGMA_ENGINE_TESSELLATION_CONTROL_SHADER")
			set(SHADER_TYPE "tessellation_control")
		elseif(${SHADER_EXT} STREQUAL ".tese")
			set(SHADER_STAGE "SIGMA_ENGINE_TESSELLATION_EVALUATION_SHADER")
			set(SHADER_TYPE "tessellation_evaluation")
		elseif(${SHADER_EXT} STREQUAL ".geom")
            set(SHADER_STAGE "SIGMA_ENGINE_GEOMETRY_SHADER")
			set(SHADER_TYPE "geometry")
		elseif(${SHADER_EXT} STREQUAL ".frag")
            set(SHADER_STAGE "SIGMA_ENGINE_FRAGMENT_SHADER")
			set(SHADER_TYPE "fragment")
        endif()

		set(SHADER "${RESOURCE_PACKAGE_DIRECTORY}/${SHADER}")
		set(SHADER_OUTPUT "${CMAKE_BINARY_DIR}/data/shader/${SHADER_TYPE}/${SHADER_DIRECTORY}${SHADER_NAME}")
		get_filename_component(SHADER_OUTPUT_DIRECTORY "${SHADER_OUTPUT}" DIRECTORY)

		execute_process(
			COMMAND ${GLSLC_COMMAND} -D${SHADER_STAGE} ${RESOURCE_INCLUDE_ARGUMENTS} -M ${SHADER} 
			OUTPUT_VARIABLE R_DEPENDS
			WORKING_DIRECTORY ${RESOURCE_PACKAGE_DIRECTORY}
		)
	
		string(REPLACE "${SHADER_NAME}${SHADER_EXT}.spv: " "" R_DEPENDS ${R_DEPENDS})
		string(REPLACE " " ";" R_DEPENDS ${R_DEPENDS})

        add_custom_command(
			OUTPUT "${SHADER_OUTPUT}${SHADER_EXT}_spv"
			COMMAND ${CMAKE_COMMAND} -E make_directory ${SHADER_OUTPUT_DIRECTORY}
			COMMAND ${GLSLC_COMMAND} --target-env=opengl -D${SHADER_STAGE} ${RESOURCE_INCLUDE_ARGUMENTS} "${SHADER}" -o "${SHADER_OUTPUT}${SHADER_EXT}_spv"
			DEPENDS ${R_DEPENDS}
        )

        add_custom_command(
			OUTPUT "${SHADER_OUTPUT}${SHADER_EXT}_spv.json"
			COMMAND ${CMAKE_COMMAND} -E make_directory ${SHADER_OUTPUT_DIRECTORY}
			COMMAND ${SPIRV_CROSS_COMMAND} "${SHADER_OUTPUT}${SHADER_EXT}_spv" --reflect --output "${SHADER_OUTPUT}${SHADER_EXT}_spv.json"
			DEPENDS "${SHADER_OUTPUT}${SHADER_EXT}_spv"
        )

        add_custom_command(
			OUTPUT "${SHADER_OUTPUT}"
			COMMAND sigma-bake -o "${CMAKE_BINARY_DIR}" "${SHADER_OUTPUT}${SHADER_EXT}_spv"
			DEPENDS "${SHADER_OUTPUT}${SHADER_EXT}_spv" "${SHADER_OUTPUT}${SHADER_EXT}_spv.json"
			WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/data/shader"
        )

		list(APPEND OUTPUT_FILES "${SHADER_OUTPUT}")
    endforeach()

	# Bake textures
	file(GLOB_RECURSE TEXTURE_SOURCE_FILES RELATIVE "${RESOURCE_PACKAGE_DIRECTORY}"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.tiff"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.tif"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.jpg"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.jpeg"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.jpe"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.jif"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.jfif"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.jfi"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.png"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.hdr"
    )

	foreach(TEXTURE ${TEXTURE_SOURCE_FILES})
		get_filename_component(TEXTURE_NAME "${TEXTURE}" NAME_WE)
		get_filename_component(TEXTURE_DIRECTORY "${TEXTURE}" DIRECTORY)
		get_filename_component(TEXTURE_EXT "${TEXTURE}" EXT)

		if (NOT TEXTURE_DIRECTORY STREQUAL "")
			set(TEXTURE_DIRECTORY "${TEXTURE_DIRECTORY}/")
		endif()

		set(TEXTURE "${RESOURCE_PACKAGE_DIRECTORY}/${TEXTURE}")
		set(TEXTURE_SETTINGS "${RESOURCE_PACKAGE_DIRECTORY}/${TEXTURE_DIRECTORY}${TEXTURE_NAME}.stex")
		set(TEXTURE_OUTPUT "${CMAKE_BINARY_DIR}/data/texture/${TEXTURE_DIRECTORY}${TEXTURE_NAME}")

		set(TEXTURE_DEPENDS "${TEXTURE}")
		if(EXISTS "${TEXTURE_SETTINGS}")
			set(TEXTURE_DEPENDS "${TEXTURE}" "${TEXTURE_SETTINGS}")
		endif()

        add_custom_command(
			OUTPUT ${TEXTURE_OUTPUT}
			COMMAND sigma-bake -o "${CMAKE_BINARY_DIR}" "${TEXTURE}"
			DEPENDS ${TEXTURE_DEPENDS} 
			WORKING_DIRECTORY ${RESOURCE_PACKAGE_DIRECTORY}
        )

		list(APPEND OUTPUT_FILES ${TEXTURE_OUTPUT})
    endforeach()

	add_custom_target(${RESOURCE_TARGET}-resources DEPENDS ${OUTPUT_FILES})
	add_dependencies(${RESOURCE_TARGET} sigma-bake ${RESOURCE_TARGET}-resources)
endfunction()
