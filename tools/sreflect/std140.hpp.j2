#ifndef __REFLECTION_PARSER__
#ifndef {{generated_gaurd}}
#define {{generated_gaurd}}

#include <sigma/util/std140_conversion.hpp>

namespace sigma {
namespace std140 {
{% for class in database.classes if class.std140 %}
    template<>
    struct type_traits<{{class.name}}> {
        static const constexpr std::size_t size = {{class.std140_size}};
        static std::ptrdiff_t convert(const {{class.name}}& source, std::uint8_t* output, std::ptrdiff_t& offset)
        {
            std::ptrdiff_t start = offset;
            std::ptrdiff_t field_offset;
            {% for field in class.fields %}
            field_offset = offset;
            offset = to_std140(source.{{field.name}}, output, field_offset);
            assert(field_offset == ({{field.std140_offset}} + start) && "'{{field.name}}' of type '{{field.type.name}}' offset does not match!\n");
            {% endfor %}
            return offset;
        }
    };
{% endfor %}
}
}

#endif // {{generated_gaurd}}
#endif // __REFLECTION_PARSER__
